--
-- PostgreSQL database dump
--

-- Dumped from database version 10.10 (Ubuntu 10.10-0ubuntu0.18.04.1)
-- Dumped by pg_dump version 10.10 (Ubuntu 10.10-0ubuntu0.18.04.1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: ir_model; Type: TABLE; Schema: public; Owner: odoo
--

CREATE TABLE public.ir_model (
    id integer NOT NULL,
    name character varying NOT NULL,
    model character varying NOT NULL,
    info text,
    state character varying,
    transient boolean,
    create_uid integer,
    create_date timestamp without time zone,
    write_uid integer,
    write_date timestamp without time zone,
    is_mail_thread boolean,
    is_mail_activity boolean,
    is_mail_blacklist boolean,
    website_form_access boolean,
    website_form_default_field_id integer,
    website_form_label character varying,
    website_form_key character varying
);


ALTER TABLE public.ir_model OWNER TO odoo;

--
-- Name: TABLE ir_model; Type: COMMENT; Schema: public; Owner: odoo
--

COMMENT ON TABLE public.ir_model IS 'Models';


--
-- Name: COLUMN ir_model.name; Type: COMMENT; Schema: public; Owner: odoo
--

COMMENT ON COLUMN public.ir_model.name IS 'Model Description';


--
-- Name: COLUMN ir_model.model; Type: COMMENT; Schema: public; Owner: odoo
--

COMMENT ON COLUMN public.ir_model.model IS 'Model';


--
-- Name: COLUMN ir_model.info; Type: COMMENT; Schema: public; Owner: odoo
--

COMMENT ON COLUMN public.ir_model.info IS 'Information';


--
-- Name: COLUMN ir_model.state; Type: COMMENT; Schema: public; Owner: odoo
--

COMMENT ON COLUMN public.ir_model.state IS 'Type';


--
-- Name: COLUMN ir_model.transient; Type: COMMENT; Schema: public; Owner: odoo
--

COMMENT ON COLUMN public.ir_model.transient IS 'Transient Model';


--
-- Name: COLUMN ir_model.create_uid; Type: COMMENT; Schema: public; Owner: odoo
--

COMMENT ON COLUMN public.ir_model.create_uid IS 'Created by';


--
-- Name: COLUMN ir_model.create_date; Type: COMMENT; Schema: public; Owner: odoo
--

COMMENT ON COLUMN public.ir_model.create_date IS 'Created on';


--
-- Name: COLUMN ir_model.write_uid; Type: COMMENT; Schema: public; Owner: odoo
--

COMMENT ON COLUMN public.ir_model.write_uid IS 'Last Updated by';


--
-- Name: COLUMN ir_model.write_date; Type: COMMENT; Schema: public; Owner: odoo
--

COMMENT ON COLUMN public.ir_model.write_date IS 'Last Updated on';


--
-- Name: COLUMN ir_model.is_mail_thread; Type: COMMENT; Schema: public; Owner: odoo
--

COMMENT ON COLUMN public.ir_model.is_mail_thread IS 'Mail Thread';


--
-- Name: COLUMN ir_model.is_mail_activity; Type: COMMENT; Schema: public; Owner: odoo
--

COMMENT ON COLUMN public.ir_model.is_mail_activity IS 'Mail Activity';


--
-- Name: COLUMN ir_model.is_mail_blacklist; Type: COMMENT; Schema: public; Owner: odoo
--

COMMENT ON COLUMN public.ir_model.is_mail_blacklist IS 'Mail Blacklist';


--
-- Name: COLUMN ir_model.website_form_access; Type: COMMENT; Schema: public; Owner: odoo
--

COMMENT ON COLUMN public.ir_model.website_form_access IS 'Allowed to use in forms';


--
-- Name: COLUMN ir_model.website_form_default_field_id; Type: COMMENT; Schema: public; Owner: odoo
--

COMMENT ON COLUMN public.ir_model.website_form_default_field_id IS 'Field for custom form data';


--
-- Name: COLUMN ir_model.website_form_label; Type: COMMENT; Schema: public; Owner: odoo
--

COMMENT ON COLUMN public.ir_model.website_form_label IS 'Label for form action';


--
-- Name: COLUMN ir_model.website_form_key; Type: COMMENT; Schema: public; Owner: odoo
--

COMMENT ON COLUMN public.ir_model.website_form_key IS 'Website Form Key';


--
-- Name: ir_model_id_seq; Type: SEQUENCE; Schema: public; Owner: odoo
--

CREATE SEQUENCE public.ir_model_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ir_model_id_seq OWNER TO odoo;

--
-- Name: ir_model_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: odoo
--

ALTER SEQUENCE public.ir_model_id_seq OWNED BY public.ir_model.id;


--
-- Name: ir_model id; Type: DEFAULT; Schema: public; Owner: odoo
--

ALTER TABLE ONLY public.ir_model ALTER COLUMN id SET DEFAULT nextval('public.ir_model_id_seq'::regclass);


--
-- Data for Name: ir_model; Type: TABLE DATA; Schema: public; Owner: odoo
--

COPY public.ir_model (id, name, model, info, state, transient, create_uid, create_date, write_uid, write_date, is_mail_thread, is_mail_activity, is_mail_blacklist, website_form_access, website_form_default_field_id, website_form_label, website_form_key) FROM stdin;
87	Companies	res.company	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
400	Attribute Value	product.attribute.value	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
401	Product Template Attribute Line	product.template.attribute.line	Attributes available on product.template with their selected values in a m2m.\n    Used as a configuration model to generate the appropriate product.template.attribute.value	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
402	Product Template Attribute Value	product.template.attribute.value	Materialized relationship between attribute values\n    and product template generated by the product.template.attribute.line	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
396	Product	product.product	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	t	t	f	\N	\N	\N	\N
537	view to join nouns and their genders	v.nouns.x.genders	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
403	Product Template Attribute Exclusion	product.template.attribute.exclusion	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
404	Pricelist	product.pricelist	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
405	Pricelist Rule	product.pricelist.item	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
133	Resource Mixin	resource.mixin	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
406	Product Price List Report	report.product.report_pricelist	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
146	Message subtypes	mail.message.subtype	 Class holding subtype definition for messages. Subtypes allow to tune\n        the follower subscription, allowing only some subtypes to be pushed\n        on the Wall. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
147	Mail Tracking Value	mail.tracking.value	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
148	Email Aliases	mail.alias	A Mail Alias is a mapping of an email address with a given Odoo Document\n       model. It is used by Odoo's mail gateway when processing incoming emails\n       sent to the system. If the recipient address (To) of the message matches\n       a Mail Alias, the message will be either processed following the rules\n       of that alias. If the message is a reply it will be attached to the\n       existing discussion on the corresponding record, otherwise a new\n       record of the corresponding model will be created.\n\n       This is meant to be used in combination with a catch-all email configuration\n       on the company's mail server, so that as soon as a new mail.alias is\n       created, it becomes immediately usable and Odoo will accept email for it.\n     	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
407	Product Price per Unit Based on Pricelist Version	product.price_list	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
152	Message	mail.message	 Override MailMessage class in order to add a new type: SMS messages.\n    Those messages comes with their own notification method, using SMS\n    gateway. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
58	HTTP Routing	ir.http	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
42	Qweb Field Float	ir.qweb.field.float	 Override qweb.field.float to add a `decimal_precision` domain option\n    and use that instead of the column's own value if it is specified\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
44	Qweb Field Datetime	ir.qweb.field.datetime	 Used to convert a t-field specification into an output HTML field.\n\n    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:\n\n    * converts the record value to html using :meth:`~.record_to_html`\n    * generates the metadata attributes (``data-oe-``) to set on the root\n      result node\n    * generates the root result node itself through :meth:`~.render_element`\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
52	Qweb Field Float Time	ir.qweb.field.float_time	 ``float_time`` converter, to display integral or fractional values as\n    human-readable time spans (e.g. 1.5 as "01:30").\n\n    Can be used on any numerical field.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
46	Qweb Field Selection	ir.qweb.field.selection	 Used to convert a t-field specification into an output HTML field.\n\n    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:\n\n    * converts the record value to html using :meth:`~.record_to_html`\n    * generates the metadata attributes (``data-oe-``) to set on the root\n      result node\n    * generates the root result node itself through :meth:`~.render_element`\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
50	Qweb Field Image	ir.qweb.field.image	\n    Widget options:\n\n    ``class``\n        set as attribute on the generated <img> tag\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
144	UTM Mixin	utm.mixin	 Mixin class for objects which can be tracked by marketing. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
149	Email Aliases Mixin	mail.alias.mixin	 A mixin for models that inherits mail.alias. This mixin initializes the\n        alias_id column in database, and manages the expected one-to-one\n        relation between your model and mail aliases.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
150	Document Followers	mail.followers	 mail_followers holds the data related to the follow mechanism inside\n    Odoo. Partners can choose to follow documents (records) of any kind\n    that inherits from mail.thread. Following documents allow to receive\n    notifications for new messages. A subscription is characterized by:\n\n    :param: res_model: model of the followed objects\n    :param: res_id: ID of resource (may be 0 for every objects)\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
151	Message Notifications	mail.notification	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
153	Activity Type	mail.activity.type	 Activity Types are used to categorize activities. Each type is a different\n    kind of activity e.g. call, mail, meeting. An activity can be generic i.e.\n    available for all models using activities; or specific to a model in which\n    case res_model_id field should be used. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
62	Module	ir.module.module	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
43	Qweb Field Date	ir.qweb.field.date	 Used to convert a t-field specification into an output HTML field.\n\n    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:\n\n    * converts the record value to html using :meth:`~.record_to_html`\n    * generates the metadata attributes (``data-oe-``) to set on the root\n      result node\n    * generates the root result node itself through :meth:`~.render_element`\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
47	Qweb Field Many to One	ir.qweb.field.many2one	 Used to convert a t-field specification into an output HTML field.\n\n    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:\n\n    * converts the record value to html using :meth:`~.record_to_html`\n    * generates the metadata attributes (``data-oe-``) to set on the root\n      result node\n    * generates the root result node itself through :meth:`~.render_element`\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
48	Qweb field many2many	ir.qweb.field.many2many	 Used to convert a t-field specification into an output HTML field.\n\n    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:\n\n    * converts the record value to html using :meth:`~.record_to_html`\n    * generates the metadata attributes (``data-oe-``) to set on the root\n      result node\n    * generates the root result node itself through :meth:`~.render_element`\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
49	Qweb Field HTML	ir.qweb.field.html	 Used to convert a t-field specification into an output HTML field.\n\n    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:\n\n    * converts the record value to html using :meth:`~.record_to_html`\n    * generates the metadata attributes (``data-oe-``) to set on the root\n      result node\n    * generates the root result node itself through :meth:`~.render_element`\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
57	Qweb Field qweb	ir.qweb.field.qweb	 Used to convert a t-field specification into an output HTML field.\n\n    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:\n\n    * converts the record value to html using :meth:`~.record_to_html`\n    * generates the metadata attributes (``data-oe-``) to set on the root\n      result node\n    * generates the root result node itself through :meth:`~.render_element`\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
61	Application	ir.module.category	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
63	Module dependency	ir.module.module.dependency	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
3	Models	ir.model	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
629	wizard controlling the learning session	vv.wizard.learning	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
9	Model Data	ir.model.data	Holds external identifier keys for records in the database.\n       This has two main uses:\n\n           * allows easy data integration with third-party systems,\n             making import/export/sync of data possible, as records\n             can be uniquely identified across multiple systems\n           * allows tracking the origin of data installed by Odoo\n             modules themselves, thus making it possible to later\n             update them seamlessly.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
570	learn session, up to 3 words to learn for a single user, with start and end date	vv.learning.session	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
45	Qweb Field Text	ir.qweb.field.text	 Used to convert a t-field specification into an output HTML field.\n\n    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:\n\n    * converts the record value to html using :meth:`~.record_to_html`\n    * generates the metadata attributes (``data-oe-``) to set on the root\n      result node\n    * generates the root result node itself through :meth:`~.render_element`\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
64	Module exclusion	ir.module.module.exclusion	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
158	Email CC management	mail.thread.cc	 mail_thread model is meant to be inherited by any model that needs to\n        act as a discussion topic on which messages can be attached. Public\n        methods are prefixed with ``message_`` in order to avoid name\n        collisions with methods of the models that will inherit from this class.\n\n        ``mail.thread`` defines fields used to handle and display the\n        communication history. ``mail.thread`` also manages followers of\n        inheriting classes. All features and expected behavior are managed\n        by mail.thread. Widgets has been designed for the 7.0 and following\n        versions of Odoo.\n\n        Inheriting classes are not required to implement any method, as the\n        default implementation will work for any model. However it is common\n        to override at least the ``message_new`` and ``message_update``\n        methods (calling ``super``) to add model-specific behavior at\n        creation and update of a thread when processing incoming emails.\n\n        Options:\n            - _mail_flat_thread: if set to True, all messages without parent_id\n                are automatically attached to the first message posted on the\n                ressource. If set to False, the display of Chatter is done using\n                threads, and no parent_id is automatically set.\n\n    MailThread features can be somewhat controlled through context keys :\n\n     - ``mail_create_nosubscribe``: at create or message_post, do not subscribe\n       uid to the record thread\n     - ``mail_create_nolog``: at create, do not log the automatic '<Document>\n       created' message\n     - ``mail_notrack``: at create and write, do not perform the value tracking\n       creating messages\n     - ``tracking_disable``: at create and write, perform no MailThread features\n       (auto subscription, tracking, post, ...)\n     - ``mail_notify_force_send``: if less than 50 email notifications to send,\n       send them directly instead of using the queue; True by default\n    	base	f	\N	\N	\N	\N	t	f	f	\N	\N	\N	\N
159	Email Address Mixin	mail.address.mixin	 Purpose of this mixin is to store a normalized email based on the primary email field.\n    A normalized email is considered as :\n        - having a left part + @ + a right part (the domain can be without '.something')\n        - being lower case\n        - having no name before the address. Typically, having no 'Name <>'\n    Ex:\n        - Formatted Email : 'Name <NaMe@DoMaIn.CoM>'\n        - Normalized Email : 'name@domain.com'\n    The primary email field can be specified on the parent model, if it differs from the default one ('email')\n    The email_normalized field can than be used on that model to search quickly on emails (by simple comparison\n    and not using time consuming regex anymore). 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
160	Mail Blacklist	mail.blacklist	 Model of blacklisted email addresses to stop sending emails.	base	f	\N	\N	\N	\N	t	f	f	\N	\N	\N	\N
161	Mail Blacklist mixin	mail.thread.blacklist	 Mixin that is inherited by all model with opt out. This mixin inherits from\n    mail.address.mixin which defines the _primary_email variable and the email_normalized\n    field that are mandatory to use the blacklist mixin. Mail Thread capabilities\n    are required for this mixin. 	base	f	\N	\N	\N	\N	t	f	t	\N	\N	\N	\N
164	Discussion Channel	mail.channel	 A mail.channel is a discussion group that may behave like a listener\n    on documents. 	base	f	\N	\N	\N	\N	t	f	f	\N	\N	\N	\N
165	Email Templates	mail.template	Templates for sending email	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
15	View	ir.ui.view	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
1	Base	base	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
639	OpenAcademy Sessions	openacademy.session	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
638	OpenAcademy Courses	openacademy.course	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
2	Unknown	_unknown	\n    Abstract model used as a substitute for relational fields with an unknown\n    comodel.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
571	Change Lock Date	account.change.lock.date	\n    This wizard is used to change the lock date\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
88	Access Groups	res.groups	 Update of res.groups class\n        - if adding users from a group, check mail.channels linked to this user\n          group and subscribe them. This is done by overriding the write method.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
383	a single vocabulary item	vv.mot.de.langue	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
84	Config Settings	res.config.settings	 Inherit the base settings to add a counter of failed email + configure\n    the alias domain. 	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
384	noun that as a word specialty can have a gender	vv.noun	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
6	Model Constraint	ir.model.constraint	\n    This model tracks PostgreSQL foreign keys and constraints used by Odoo\n    models.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
78	Contact	res.partner	 Update partner to add a field about notification preferences. Add a generic opt-out field that can be used\n       to restrict usage of automatic email templates. 	base	f	\N	\N	\N	\N	t	t	t	\N	\N	\N	\N
7	Relation Model	ir.model.relation	\n    This model tracks PostgreSQL tables used to implement Odoo many2many\n    relations.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
76	Partner Tags	res.partner.category	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
77	Partner Title	res.partner.title	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
5	Fields Selection	ir.model.fields.selection	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
85	Currency	res.currency	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
103	Merge Partner Wizard	base.partner.merge.automatic.wizard	\n        The idea behind this wizard is to create a list of potential partners to\n        merge. We use two objects, the first one is the wizard for the end-user.\n        And the second will contain the partner list to merge.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
142	Campaign Stage	utm.stage	Stage for utm campaigns. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
90	Users	res.users	 Update of res.users class\n        - add a preference about sending emails about notifications\n        - make a new user follow itself\n        - add a welcome message\n        - add suggestion preference\n        - if adding groups to a user, check mail.channels linked to this user\n          group, and the user. This is done by overriding the write method.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
382	gender combinations table as reference for nouns	vv.gender.combo	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
385	Words N Learners Relations	vv.mots.learners	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
74	Languages	res.lang	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
536	wizard for entering new words	t.mot	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
73	Country state	res.country.state	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
75	Address Format	format.address.mixin	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
86	Currency Rate	res.currency.rate	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
104	Company Document Layout	base.document.layout	\n    Customise the company document layout and display a live preview\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
187	Snailmail Letter	snailmail.letter	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
188	Dismiss notification for resend by model	snailmail.letter.cancel	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
419	Tax Group	account.tax.group	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
611	Website Visitor	website.visitor	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
4	Fields	ir.model.fields	 fields configuration for form builder 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
601	SEO metadata	website.seo.metadata	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
608	All Website Route	website.route	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
609	Website rewrite	website.rewrite	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
602	Multi Website Mixin	website.multi.mixin	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
603	Website Published Mixin	website.published.mixin	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
604	Multi Website Published Mixin	website.published.multi.mixin	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
610	Visited Pages	website.track	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
27	Attachment	ir.attachment	Attachments are used to link binary files or url to any openerp document.\n\n    External attachment storage\n    ---------------------------\n\n    The computed field ``datas`` is implemented using ``_file_read``,\n    ``_file_write`` and ``_file_delete``, which can be overridden to implement\n    other storage engines. Such methods should check for other location pseudo\n    uri (example: hdfs://hadoopserver).\n\n    The default implementation is the file:dirname location that stores files\n    on the local filesystem using name based on their sha1 hash\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
606	Website Menu	website.menu	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
607	Page	website.page	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
16	Reset View Architecture Wizard	reset.view.arch.wizard	 A wizard to reset views architecture. 	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
19	Action Window View	ir.actions.act_window.view	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
24	Configuration Wizards	ir.actions.todo	\n    Configuration Wizards\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
29	Filters	ir.filters	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
94	Module Reference Report (base)	report.base.report_irmodulereference	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
605	Website	website	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
96	Install Language	base.language.install	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
31	Translation	ir.translation	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
32	Exports	ir.exports	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
33	Exports Line	ir.exports.line	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
36	Automatic Vacuum	ir.autovacuum	 Expose the vacuum method to the cron jobs mechanism. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
37	Mail Server	ir.mail_server	Represents an SMTP server, able to send outgoing emails, with SSL and TLS capabilities.	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
38	Fields Converter	ir.fields.converter	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
40	Qweb Field	ir.qweb.field	 Used to convert a t-field specification into an output HTML field.\n\n    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:\n\n    * converts the record value to html using :meth:`~.record_to_html`\n    * generates the metadata attributes (``data-oe-``) to set on the root\n      result node\n    * generates the root result node itself through :meth:`~.render_element`\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
41	Qweb Field Integer	ir.qweb.field.integer	 Used to convert a t-field specification into an output HTML field.\n\n    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:\n\n    * converts the record value to html using :meth:`~.record_to_html`\n    * generates the metadata attributes (``data-oe-``) to set on the root\n      result node\n    * generates the root result node itself through :meth:`~.render_element`\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
51	Qweb Field Monetary	ir.qweb.field.monetary	 ``monetary`` converter, has a mandatory option\n    ``display_currency`` only if field is not of type Monetary.\n    Otherwise, if we are in presence of a monetary field, the field definition must\n    have a currency_field attribute set.\n\n    The currency is used for formatting *and rounding* of the float value. It\n    is assumed that the linked res_currency has a non-empty rounding value and\n    res.currency's ``round`` method is used to perform rounding.\n\n    .. note:: the monetary converter internally adds the qweb context to its\n              options mapping, so that the context is available to callees.\n              It's set under the ``_values`` key.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
135	Work Detail	resource.calendar.attendance	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
143	UTM Tag	utm.tag	Model of categories of utm campaigns, i.e. marketing, newsletter, ... 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
55	Qweb Field Barcode	ir.qweb.field.barcode	 ``barcode`` widget rendering, inserts a data:uri-using image tag in the\n    document. May be overridden by e.g. the website module to generate links\n    instead.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
8	Model Access	ir.model.access	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
59	Logging	ir.logging	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
30	Default Values	ir.default	 User-defined default values for fields. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
35	System Parameter	ir.config_parameter	Per-database storage of configuration key-value pairs.	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
60	Company Property	ir.property	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
65	Demo	ir.demo	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
66	Demo failure	ir.demo_failure	 Stores modules for which we could not install demo data\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
67	Demo Failure wizard	ir.demo_failure.wizard	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
53	Qweb Field Duration	ir.qweb.field.duration	 ``duration`` converter, to display integral or fractional values as\n    human-readable time spans (e.g. 1.5 as "1 hour 30 minutes").\n\n    Can be used on any numerical field.\n\n    Has an option ``unit`` which can be one of ``second``, ``minute``,\n    ``hour``, ``day``, ``week`` or ``year``, used to interpret the numerical\n    field value before converting it. By default use ``second``.\n\n    Has an option ``round``. By default use ``second``.\n\n    Has an option ``digital`` to display 01:00 instead of 1 hour\n\n    Sub-second values will be ignored.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
54	Qweb Field Relative	ir.qweb.field.relative	 Used to convert a t-field specification into an output HTML field.\n\n    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:\n\n    * converts the record value to html using :meth:`~.record_to_html`\n    * generates the metadata attributes (``data-oe-``) to set on the root\n      result node\n    * generates the root result node itself through :meth:`~.render_element`\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
69	Paper Format Config	report.paperformat	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
71	Country	res.country	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
72	Country Group	res.country.group	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
79	Industry	res.partner.industry	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
81	Bank Accounts	res.partner.bank	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
80	Bank	res.bank	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
162	Listeners of a Channel	mail.channel.partner	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
163	Channel black/white list	mail.moderation	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
428	CashBox Line	account.cashbox.line	 Cash Box Details 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
10	Create Menu Wizard	wizard.ir.model.menu.create	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
11	Sequence	ir.sequence	 Sequence model.\n\n    The sequence model allows to define and use so-called sequence objects.\n    Such objects are used to generate unique identifiers in a transaction-safe\n    way.\n\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
12	Sequence Date Range	ir.sequence.date_range	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
39	Qweb	ir.qweb	 QWeb object for rendering stuff in the website context 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
34	Record Rule	ir.rule	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
56	Qweb Field Contact	ir.qweb.field.contact	 Used to convert a t-field specification into an output HTML field.\n\n    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:\n\n    * converts the record value to html using :meth:`~.record_to_html`\n    * generates the metadata attributes (``data-oe-``) to set on the root\n      result node\n    * generates the root result node itself through :meth:`~.render_element`\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
82	Config	res.config	 Base classes for new-style configuration items\n\n    Configuration items should inherit from this class, implement\n    the execute method (and optionally the cancel one) and have\n    their view inherit from the related res_config_view_base view.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
186	Sales Team	crm.team	 A mixin for models that inherits mail.alias. This mixin initializes the\n        alias_id column in database, and manages the expected one-to-one\n        relation between your model and mail aliases.\n    	base	f	\N	\N	\N	\N	t	f	f	\N	\N	\N	\N
464	Aged Partner Balance Report	report.account.report_agedpartnerbalance	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
211	CRM Activity Analysis	crm.activity.report	 CRM Lead Analysis 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
26	Report Action	ir.actions.report	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
83	Config Installer	res.config.installer	 New-style configuration base specialized for addons selection\n    and installation.\n\n    Basic usage\n    -----------\n\n    Subclasses can simply define a number of boolean fields. The field names\n    should be the names of the addons to install (when selected). Upon action\n    execution, selected boolean fields (and those only) will be interpreted as\n    addons to install, and batch-installed.\n\n    Additional addons\n    -----------------\n\n    It is also possible to require the installation of an additional\n    addon set when a specific preset of addons has been marked for\n    installation (in the basic usage only, additionals can't depend on\n    one another).\n\n    These additionals are defined through the ``_install_if``\n    property. This property is a mapping of a collection of addons (by\n    name) to a collection of addons (by name) [#]_, and if all the *key*\n    addons are selected for installation, then the *value* ones will\n    be selected as well. For example::\n\n        _install_if = {\n            ('sale','crm'): ['sale_crm'],\n        }\n\n    This will install the ``sale_crm`` addon if and only if both the\n    ``sale`` and ``crm`` addons are selected for installation.\n\n    You can define as many additionals as you wish, and additionals\n    can overlap in key and value. For instance::\n\n        _install_if = {\n            ('sale','crm'): ['sale_crm'],\n            ('sale','project'): ['sale_service'],\n        }\n\n    will install both ``sale_crm`` and ``sale_service`` if all of\n    ``sale``, ``crm`` and ``project`` are selected for installation.\n\n    Hook methods\n    ------------\n\n    Subclasses might also need to express dependencies more complex\n    than that provided by additionals. In this case, it's possible to\n    define methods of the form ``_if_%(name)s`` where ``name`` is the\n    name of a boolean field. If the field is selected, then the\n    corresponding module will be marked for installation *and* the\n    hook method will be executed.\n\n    Hook methods take the usual set of parameters (cr, uid, ids,\n    context) and can return a collection of additional addons to\n    install (if they return anything, otherwise they should not return\n    anything, though returning any "falsy" value such as None or an\n    empty collection will have the same effect).\n\n    Complete control\n    ----------------\n\n    The last hook is to simply overload the ``modules_to_install``\n    method, which implements all the mechanisms above. This method\n    takes the usual set of parameters (cr, uid, ids, context) and\n    returns a ``set`` of addons to install (addons selected by the\n    above methods minus addons from the *basic* set which are already\n    installed) [#]_ so an overloader can simply manipulate the ``set``\n    returned by ``ResConfigInstaller.modules_to_install`` to add or\n    remove addons.\n\n    Skipping the installer\n    ----------------------\n\n    Unless it is removed from the view, installers have a *skip*\n    button which invokes ``action_skip`` (and the ``cancel`` hook from\n    ``res.config``). Hooks and additionals *are not run* when skipping\n    installation, even for already installed addons.\n\n    Again, setup your hooks accordingly.\n\n    .. [#] note that since a mapping key needs to be hashable, it's\n           possible to use a tuple or a frozenset, but not a list or a\n           regular set\n\n    .. [#] because the already-installed modules are only pruned at\n           the very end of ``modules_to_install``, additionals and\n           hooks depending on them *are guaranteed to execute*. Setup\n           your hooks accordingly.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
89	Users Log	res.users.log	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
93	Decimal Precision	decimal.precision	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
465	Get hash integrity result as PDF.	report.account.report_hash_integrity	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
122	Assets Utils	web_editor.assets	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
22	Server Action	ir.actions.server	 Add website option in server actions. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
13	Menu	ir.ui.menu	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
14	Custom View	ir.ui.view.custom	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
17	Actions	ir.actions.actions	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
18	Action Window	ir.actions.act_window	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
20	Action Window Close	ir.actions.act_window_close	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
21	Action URL	ir.actions.act_url	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
23	Server Action value mapping	ir.server.object.lines	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
97	Language Import	base.language.import	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
98	Upgrade Module	base.module.upgrade	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
99	Module Uninstall	base.module.uninstall	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
100	Language Export	base.language.export	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
28	Scheduled Actions	ir.cron	 Model describing cron jobs (also called actions or tasks).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
95	Update Module	base.module.update	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
101	Update Translations	base.update.translations	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
102	Merge Partner Line	base.partner.merge.line	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
70	Image Mixin	image.mixin	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
485	Barcode Nomenclature	barcode.nomenclature	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
486	Barcode Rule	barcode.rule	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
487	Barcode Event Mixin	barcodes.barcode_events_mixin	 Mixin class for objects reacting when a barcode is scanned in their form views\n        which contains `<field name="_barcode_scanned" widget="barcode_handler"/>`.\n        Models using this mixin must implement the method on_barcode_scanned. It works\n        like an onchange and receives the scanned barcode in parameter.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
488	Removal Strategy	product.removal	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
489	Putaway Rule	stock.putaway.rule	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
500	Packages	stock.quant.package	 Packages containing quants and/or other packages 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
91	Change Password Wizard	change.password.wizard	 A wizard to manage the change of users' passwords. 	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
92	User, Change Password Wizard	change.password.user	 A model to configure users in the change password wizard. 	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
504	Minimum Inventory Rule	stock.warehouse.orderpoint	 Defines Minimum stock rules. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
505	Scrap	stock.scrap	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	t	f	f	\N	\N	\N	\N
506	Stock Package Level	stock.package_level	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
121	Tests: Base Import Model Complex	base_import.tests.models.complex	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
131	Communication Bus	bus.bus	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
132	User Presence	bus.presence	 User Presence\n        Its status is 'online', 'away' or 'offline'. This model should be a one2one, but is not\n        attached to res_users to avoid database concurrence errors. Since the 'update' method is executed\n        at each poll, if the user have multiple opened tabs, concurrence errors can happend, but are 'muted-logged'.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
134	Resource Working Time	resource.calendar	 Calendar model for a resource. It has\n\n     - attendance_ids: list of resource.calendar.attendance that are a working\n                       interval in a given weekday.\n     - leave_ids: list of leaves linked to this calendar. A leave can be general\n                  or linked to a specific resource, depending on its resource_id.\n\n    All methods in this class use intervals. An interval is a tuple holding\n    (begin_datetime, end_datetime). A list of intervals is therefore a list of\n    tuples, holding several intervals of work or leaves. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
68	Report Layout	report.layout	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
387	Product UoM Categories	uom.category	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
388	Product Unit of Measure	uom.uom	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
105	Base Import Mapping	base_import.mapping	 mapping of previous column:field selections\n\n    This is useful when repeatedly importing from a third-party\n    system: column names generated by the external system may\n    not match Odoo's field names or labels. This model is used\n    to save the mapping between column names and fields so that\n    next time a user imports from the same third-party systems\n    we can automatically match the columns to the correct field\n    without them having to re-enter the mapping every single\n    time.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
118	Tests : Base Import Model, One to Many child	base_import.tests.models.o2m.child	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
119	Tests : Base Import Model Preview	base_import.tests.models.preview	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
120	Tests: Base Import Model Float	base_import.tests.models.float	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
136	Resources	resource.resource	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
137	Resource Time Off Detail	resource.calendar.leaves	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
25	Client Action	ir.actions.client	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
529	Stock Valuation Layer	stock.valuation.layer	Stock Valuation Layer	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
190	Update address of partner	snailmail.letter.missing.required.fields	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
538	Basic Employee	hr.employee.base	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
539	Employee	hr.employee	\n    NB: Any field only available on the model hr.employee (i.e. not on the\n    hr.employee.public model) should have `groups="hr.group_hr_user"` on its\n    definition to avoid being prefetched when the user hasn't access to the\n    hr.employee model. Indeed, the prefetch loads the data for all the fields\n    that are available according to the group defined on them.\n    	base	f	\N	\N	\N	\N	t	t	f	\N	\N	\N	\N
540	Employee Category	hr.employee.category	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
138	Test Resource Model	resource.test	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
139	UTM Medium	utm.medium	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
140	UTM Campaign	utm.campaign	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
141	UTM Source	utm.source	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
123	Web Editor Converter Test	web_editor.converter.test	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
124	Web Editor Converter Subtest	web_editor.converter.test.sub	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
125	Tours	web_tour.tour	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
145	IAP Account	iap.account	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
154	Activity	mail.activity	 An actual activity to perform. Activities are linked to\n    documents using res_id and res_model_id fields. Activities have a deadline\n    that can be used in kanban view to display a status. Once done activities\n    are unlinked and a message is posted. This message has a new activity_type_id\n    field that indicates the activity linked to the message. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
189	Format Error Sending a Snailmail Letter	snailmail.letter.format.error	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
541	Public Employee	hr.employee.public	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
542	HR Department	hr.department	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	t	f	f	\N	\N	\N	\N
543	Job Position	hr.job	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	t	f	f	\N	\N	\N	\N
544	Plan activity type	hr.plan.activity.type	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
545	plan	hr.plan	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
546	Plan Wizard	hr.plan.wizard	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
157	Email Thread	mail.thread	 mail_thread model is meant to be inherited by any model that needs to\n        act as a discussion topic on which messages can be attached. Public\n        methods are prefixed with ``message_`` in order to avoid name\n        collisions with methods of the models that will inherit from this class.\n\n        ``mail.thread`` defines fields used to handle and display the\n        communication history. ``mail.thread`` also manages followers of\n        inheriting classes. All features and expected behavior are managed\n        by mail.thread. Widgets has been designed for the 7.0 and following\n        versions of Odoo.\n\n        Inheriting classes are not required to implement any method, as the\n        default implementation will work for any model. However it is common\n        to override at least the ``message_new`` and ``message_update``\n        methods (calling ``super``) to add model-specific behavior at\n        creation and update of a thread when processing incoming emails.\n\n        Options:\n            - _mail_flat_thread: if set to True, all messages without parent_id\n                are automatically attached to the first message posted on the\n                ressource. If set to False, the display of Chatter is done using\n                threads, and no parent_id is automatically set.\n\n    MailThread features can be somewhat controlled through context keys :\n\n     - ``mail_create_nosubscribe``: at create or message_post, do not subscribe\n       uid to the record thread\n     - ``mail_create_nolog``: at create, do not log the automatic '<Document>\n       created' message\n     - ``mail_notrack``: at create and write, do not perform the value tracking\n       creating messages\n     - ``tracking_disable``: at create and write, perform no MailThread features\n       (auto subscription, tracking, post, ...)\n     - ``mail_notify_force_send``: if less than 50 email notifications to send,\n       send them directly instead of using the queue; True by default\n    	base	f	\N	\N	\N	\N	t	f	f	\N	\N	\N	\N
166	Canned Response / Shortcode	mail.shortcode	 Shortcode\n        Canned Responses, allowing the user to defined shortcuts in its message. Should be applied before storing message in database.\n        Emoji allowing replacing text with image for visual effect. Should be applied when the message is displayed (only for final rendering).\n        These shortcodes are global and are available for every user.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
168	Invite wizard	mail.wizard.invite	 Wizard to invite partners (or channels) and make them followers. 	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
169	Email composition wizard	mail.compose.message	 Generic message composition wizard. You may inherit from this wizard\n        at model and view levels to provide specific features.\n\n        The behavior of the wizard depends on the composition_mode field:\n        - 'comment': post on a record. The wizard is pre-populated via ``get_record_data``\n        - 'mass_mail': wizard in mass mailing mode where the mail details can\n            contain template placeholders that will be merged with actual data\n            before being sent to each recipient.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
170	Dismiss notification for resend by model	mail.resend.cancel	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
171	Email resend wizard	mail.resend.message	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
172	Partner with additionnal information for mail resend	mail.resend.partner	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
173	Email Template Preview	email_template.preview	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
389	Analytic Account Distribution	account.analytic.distribution	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
390	Analytic Tags	account.analytic.tag	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
391	Analytic Categories	account.analytic.group	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
155	Activity Mixin	mail.activity.mixin	 Mail Activity Mixin is a mixin class to use if you want to add activities\n    management on a model. It works like the mail.thread mixin. It defines\n    an activity_ids one2many field toward activities using res_id and res_model_id.\n    Various related / computed fields are also added to have a global status of\n    activities on documents.\n\n    Activities come with a new JS widget for the form view. It is integrated in the\n    Chatter widget although it is a separate widget. It displays activities linked\n    to the current record and allow to schedule, edit and mark done activities.\n    Use widget="mail_activity" on activity_ids field in form view to use it.\n\n    There is also a kanban widget defined. It defines a small widget to integrate\n    in kanban vignettes. It allow to manage activities directly from the kanban\n    view. Use widget="kanban_activity" on activitiy_ids field in kanban view to\n    use it.\n\n    Some context keys allow to control the mixin behavior. Use those in some\n    specific cases like import\n\n     * ``mail_activity_automation_skip``: skip activities automation; it means\n       no automated activities will be generated, updated or unlinked, allowing\n       to save computation and avoid generating unwanted activities;\n    	base	f	\N	\N	\N	\N	f	t	f	\N	\N	\N	\N
392	Analytic Account	account.analytic.account	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	t	f	f	\N	\N	\N	\N
167	Publisher Warranty Contract	publisher_warranty.contract	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
106	Base Import	base_import.import	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
107	Tests : Base Import Model, Character	base_import.tests.models.char	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
108	Tests : Base Import Model, Character required	base_import.tests.models.char.required	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
109	Tests : Base Import Model, Character readonly	base_import.tests.models.char.readonly	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
110	Tests : Base Import Model, Character states	base_import.tests.models.char.states	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
111	Tests : Base Import Model, Character No readonly	base_import.tests.models.char.noreadonly	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
393	Analytic Line	account.analytic.line	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
174	Calendar Contacts	calendar.contacts	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
175	Calendar Attendee Information	calendar.attendee	 Calendar Attendee Information 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
176	Event Alarm Manager	calendar.alarm_manager	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
177	Event Alarm	calendar.alarm	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
178	Event Meeting Type	calendar.event.type	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
179	Calendar Event	calendar.event	 Model for Calendar Event\n\n        Special context keys :\n            - `no_mail_to_attendees` : disabled sending email to attendees when creating/editing a meeting\n    	base	f	\N	\N	\N	\N	t	f	f	\N	\N	\N	\N
180	Incoming Mail Server	fetchmail.server	Incoming POP/IMAP mail server account	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
181	Mail Bot	mail.bot	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
182	Partner Autocomplete Sync	res.partner.autocomplete.sync	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
183	Phone Blacklist	phone.blacklist	 Blacklist of phone numbers. Used to avoid sending unwanted messages to people. 	base	f	\N	\N	\N	\N	t	f	f	\N	\N	\N	\N
112	Tests : Base Import Model, Character still readonly	base_import.tests.models.char.stillreadonly	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
113	Tests : Base Import Model, Many to One	base_import.tests.models.m2o	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
114	Tests : Base Import Model, Many to One related	base_import.tests.models.m2o.related	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
115	Tests : Base Import Model, Many to One required	base_import.tests.models.m2o.required	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
116	Tests : Base Import Model, Many to One required related	base_import.tests.models.m2o.required.related	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
117	Tests : Base Import Model, One to Many	base_import.tests.models.o2m	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
184	Phone Validation Mixin	phone.validation.mixin	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
185	Phone Blacklist Mixin	mail.thread.phone	 Purpose of this mixin is to offer two services\n\n      * compute a sanitized phone number based on ´´_sms_get_number_fields´´.\n        It takes first sanitized value, trying each field returned by the\n        method (see ``MailThread._sms_get_number_fields()´´ for more details\n        about the usage of this method);\n      * compute blacklist state of records. It is based on phone.blacklist\n        model and give an easy-to-use field and API to manipulate blacklisted\n        records;\n\n    Main API methods\n\n      * ``_phone_set_blacklisted``: set recordset as blacklisted;\n      * ``_phone_reset_blacklisted``: reactivate recordset (even if not blacklisted\n        this method can be called safely);\n    	base	f	\N	\N	\N	\N	t	f	f	\N	\N	\N	\N
394	Product Template	product.template	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	t	t	f	\N	\N	\N	\N
395	Product Category	product.category	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
397	Product Packaging	product.packaging	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
398	Supplier Pricelist	product.supplierinfo	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
399	Product Attribute	product.attribute	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
547	Departure Wizard	hr.departure.wizard	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
191	Portal Mixin	portal.mixin	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
192	Portal Sharing	portal.share	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
193	Grant Portal Access	portal.wizard	\n        A wizard to manage the creation/removal of portal users.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
194	Portal User Config	portal.wizard.user	\n        A model to configure users in the portal wizard.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
195	SMS API	sms.api	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
196	Outgoing SMS	sms.sms	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
197	SMS Templates	sms.template	Templates for sending SMS	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
198	Dismiss notification for resend by model	sms.cancel	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
199	Send SMS Wizard	sms.composer	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
200	Resend Notification	sms.resend.recipient	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
201	SMS Resend	sms.resend	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
202	SMS Template Preview	sms.template.preview	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
490	Inventory	stock.inventory	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
491	Inventory Line	stock.inventory.line	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
492	Inventory Locations	stock.location	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
493	Inventory Routes	stock.location.route	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
494	Stock Move	stock.move	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
495	Product Moves (Stock Move Line)	stock.move.line	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
496	Lot/Serial	stock.production.lot	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	t	t	f	\N	\N	\N	\N
497	Picking Type	stock.picking.type	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
498	Transfer	stock.picking	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	t	t	f	\N	\N	\N	\N
499	Quants	stock.quant	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
501	Stock Rule	stock.rule	 A rule describe what a procurement should do; produce, buy, move, ... 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
502	Procurement Group	procurement.group	\n    The procurement group class is used to group products together\n    when computing procurements. (tasks, physical products, ...)\n\n    The goal is that when you have one sales order of several products\n    and the products are pulled from the same or several location(s), to keep\n    having the moves grouped into pickings that represent the sales order.\n\n    Used in: sales order (to group delivery order lines like the so), pull/push\n    rules (to pack like the delivery order), on orderpoints (e.g. for wave picking\n    all the similar products together).\n\n    Grouping is made only if the source and the destination is the same.\n    Suppose you have 4 lines on a picking from Output where 2 lines will need\n    to come from Input (crossdock) and 2 lines coming from Stock -> Output As\n    the four will have the same group ids from the SO, the move from input will\n    have a stock.picking with 2 grouped lines and the move from stock will have\n    2 grouped lines also.\n\n    The name is usually the name of the original document (sales order) or a\n    sequence computed if created manually.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
503	Warehouse	stock.warehouse	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
507	Stock Quantity Report	report.stock.quantity	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
508	Stock rule report	report.stock.report_stock_rule	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
509	Traceability Report	stock.traceability.report	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
510	Stock Assign Serial Numbers	stock.assign.serial	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
511	Return Picking Line	stock.return.picking.line	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
512	Return Picking	stock.return.picking	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
513	Change Product Quantity	stock.change.product.qty	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
514	Run Scheduler Manually	stock.scheduler.compute	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
515	Immediate Transfer	stock.immediate.transfer	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
516	Backorder Confirmation	stock.backorder.confirmation	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
517	Transfer Over Processed Stock	stock.overprocessed.transfer	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
518	Stock Quantity History	stock.quantity.history	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
519	Stock Rules report	stock.rules.report	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
520	Warn Insufficient Quantity	stock.warn.insufficient.qty	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
521	Warn Insufficient Scrap Quantity	stock.warn.insufficient.qty.scrap	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
522	Product Replenish	product.replenish	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
523	Stock Track Confirmation	stock.track.confirmation	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
524	Stock Track Line	stock.track.line	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
525	Stock Package Destination	stock.package.destination	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
526	Assign Responsible	stock.picking.responsible	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
203	Digest	digest.digest	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
204	Digest Tips	digest.tip	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
548	Contract	hr.contract	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	t	t	f	\N	\N	\N	\N
527	Stock Report	stock.report	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
528	Confirm Stock SMS	confirm.stock.sms	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
408	Fiscal Position	account.fiscal.position	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
409	Tax Mapping of Fiscal Position	account.fiscal.position.tax	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
410	Accounts Mapping of Fiscal Position	account.fiscal.position.account	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
411	Account Type	account.account.type	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
412	Account Tag	account.account.tag	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
413	Account Tax Report Line	account.tax.report.line	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
414	Account	account.account	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
415	Account Group	account.group	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
416	Account codes first 2 digits	account.root	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
417	Account Journal Group	account.journal.group	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
418	Journal	account.journal	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	t	t	f	\N	\N	\N	\N
420	Tax	account.tax	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
421	Tax Repartition Line	account.tax.repartition.line	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
422	Preset to create journal entries during a invoices and payments matching	account.reconcile.model	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
423	Payment Methods	account.payment.method	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
424	Payments	account.payment	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	t	t	f	\N	\N	\N	\N
425	Register Payment	account.payment.register	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
426	Payment Terms	account.payment.term	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
427	Payment Terms Line	account.payment.term.line	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
429	Bank Statement Cashbox	account.bank.statement.cashbox	\n    Account Bank Statement popup that allows entering cash details.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
430	Bank Statement Closing Balance	account.bank.statement.closebalance	\n    Account Bank Statement wizard that check that closing balance is correct.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
431	Bank Statement	account.bank.statement	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	t	f	f	\N	\N	\N	\N
432	Bank Statement Line	account.bank.statement.line	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
433	Journal Entries	account.move	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	t	t	f	\N	\N	\N	\N
434	Journal Item	account.move.line	Defines getters to have a common facade for order and move lines in TaxCloud.	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
435	Partial Reconcile	account.partial.reconcile	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
436	Full Reconcile	account.full.reconcile	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
437	Templates for Accounts	account.account.template	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
438	Account Chart Template	account.chart.template	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
439	Templates for Taxes	account.tax.template	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
440	Tax Repartition Line Template	account.tax.repartition.line.template	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
441	Template for Fiscal Position	account.fiscal.position.template	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
442	Tax Mapping Template of Fiscal Position	account.fiscal.position.tax.template	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
443	Accounts Mapping Template of Fiscal Position	account.fiscal.position.account.template	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
444	Reconcile Model Template	account.reconcile.model.template	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
445	Fiscal Year	account.fiscal.year	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
446	Account Cash Rounding	account.cash.rounding	\n    In some countries, we need to be able to make appear on an invoice a rounding line, appearing there only because the\n    smallest coinage has been removed from the circulation. For example, in Switzerland invoices have to be rounded to\n    0.05 CHF because coins of 0.01 CHF and 0.02 CHF aren't used anymore.\n    see https://en.wikipedia.org/wiki/Cash_rounding for more details.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
447	Account Reconciliation widget	account.reconciliation.widget	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
448	Incoterms	account.incoterms	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
449	Create accrual entry.	account.accrual.accounting.wizard	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
450	Account Unreconcile	account.unreconcile	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
451	Validate Account Move	validate.account.move	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
452	Cash Box Out	cash.box.out	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
453	Account Move Reversal	account.move.reversal	\n    Account move reversal wizard, it cancel an account move by reversing it.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
454	Account Common Report	account.common.report	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
455	Common Journal Report	account.common.journal.report	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
456	Account Print Journal	account.print.journal	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
457	Opening Balance of Financial Year	account.financial.year.op	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
458	Bank setup manual config	account.setup.bank.manual.config	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
459	Tax Adjustments Wizard	tax.adjustments.wizard	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
460	Account Invoice Send	account.invoice.send	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
461	Invoices Statistics	account.invoice.report	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
462	Account report with payment lines	report.account.report_invoice_with_payments	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
463	Account Journal Report	report.account.report_journal	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
206	CRM Stages	crm.stage	 Model for case stages. This models the main stages of a document\n        management flow. Main CRM objects (leads, opportunities, project\n        issues, ...) will now use only stages, instead of state and stages.\n        Stages are for example used to display the kanban view of records.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
207	Lead Tag	crm.lead.tag	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
208	Opp. Lost Reason	crm.lost.reason	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
209	Lead Scoring Frequency	crm.lead.scoring.frequency	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
210	Fields that can be used for predictive lead scoring computation	crm.lead.scoring.frequency.field	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
212	Get Lost Reason	crm.lead.lost	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
213	Partner linking/binding in CRM wizard	crm.partner.binding	\n        Handle the partner binding or generation in any CRM wizard that requires\n        such feature, like the lead2opportunity wizard, or the\n        phonecall2opportunity wizard.  Try to find a matching partner from the\n        CRM model's information (name, email, phone number, etc) or create a new\n        one on the fly.\n        Use it like a mixin with the wizard of your choice.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
214	Convert Lead to Opportunity (not in mass)	crm.lead2opportunity.partner	\n        Handle the partner binding or generation in any CRM wizard that requires\n        such feature, like the lead2opportunity wizard, or the\n        phonecall2opportunity wizard.  Try to find a matching partner from the\n        CRM model's information (name, email, phone number, etc) or create a new\n        one on the fly.\n        Use it like a mixin with the wizard of your choice.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
215	Convert Lead to Opportunity (in mass)	crm.lead2opportunity.partner.mass	\n        Handle the partner binding or generation in any CRM wizard that requires\n        such feature, like the lead2opportunity wizard, or the\n        phonecall2opportunity wizard.  Try to find a matching partner from the\n        CRM model's information (name, email, phone number, etc) or create a new\n        one on the fly.\n        Use it like a mixin with the wizard of your choice.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
216	Merge Opportunities	crm.merge.opportunity	\n        Merge opportunities together.\n        If we're talking about opportunities, it's just because it makes more sense\n        to merge opps than leads, because the leads are more ephemeral objects.\n        But since opportunities are leads, it's also possible to merge leads\n        together (resulting in a new lead), or leads and opps together (resulting\n        in a new opp).\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
549	Contract and Employee Analysis Report	hr.contract.employee.report	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
466	Import Bank Statement	account.bank.statement.import	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
467	Journal Creation on Bank Statement Import	account.bank.statement.import.journal.creation	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
483	Print Pre-numbered Checks	print.prenumbered.checks	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
468	Extracted words from invoice scan	account.invoice_extract.words	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
469	Provider for online account synchronization	account.online.provider	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	t	f	f	\N	\N	\N	\N
470	Interface for Online Account Journal	account.online.journal	\n    This class is used as an interface.\n    It is used to save the state of the current online accout.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
471	Link synchronized account to a journal	account.online.link.wizard	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
472	Wizard to link synchronized accounts to journal	account.online.wizard	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
550	Expense	hr.expense	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	t	t	f	\N	\N	\N	\N
551	Expense Report	hr.expense.sheet	\n        Here are the rights associated with the expense flow\n\n        Action       Group                   Restriction\n        =================================================================================\n        Submit      Employee                Only his own\n                    Officer                 If he is expense manager of the employee, manager of the employee\n                                             or the employee is in the department managed by the officer\n                    Manager                 Always\n        Approve     Officer                 Not his own and he is expense manager of the employee, manager of the employee\n                                             or the employee is in the department managed by the officer\n                    Manager                 Always\n        Post        Anybody                 State = approve and journal_id defined\n        Done        Anybody                 State = approve and journal_id defined\n        Cancel      Officer                 Not his own and he is expense manager of the employee, manager of the employee\n                                             or the employee is in the department managed by the officer\n                    Manager                 Always\n        =================================================================================\n    	base	f	\N	\N	\N	\N	t	t	f	\N	\N	\N	\N
552	Expense Refuse Reason Wizard	hr.expense.refuse.wizard	This wizard can be launched from an he.expense (an expense line)\n    or from an hr.expense.sheet (En expense report)\n    'hr_expense_refuse_model' must be passed in the context to differentiate\n    the right model to use.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
553	Expense Register Payment Wizard	hr.expense.sheet.register.payment.wizard	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
473	Payment Acquirer	payment.acquirer	 Acquirer Model. Each specific acquirer can extend the model by adding\n    its own fields, using the acquirer_name as a prefix for the new fields.\n    Using the required_if_provider='<name>' attribute on fields it is possible\n    to have required fields that depend on a specific acquirer.\n\n    Each acquirer has a link to an ir.ui.view record that is a template of\n    a button used to display the payment form. See examples in ``payment_ingenico``\n    and ``payment_paypal`` modules.\n\n    Methods that should be added in an acquirer-specific implementation:\n\n     - ``<name>_form_generate_values(self, reference, amount, currency,\n       partner_id=False, partner_values=None, tx_custom_values=None)``:\n       method that generates the values used to render the form button template.\n     - ``<name>_get_form_action_url(self):``: method that returns the url of\n       the button form. It is used for example in ecommerce application if you\n       want to post some data to the acquirer.\n     - ``<name>_compute_fees(self, amount, currency_id, country_id)``: computes\n       the fees of the acquirer, using generic fields defined on the acquirer\n       model (see fields definition).\n\n    Each acquirer should also define controllers to handle communication between\n    OpenERP and the acquirer. It generally consists in return urls given to the\n    button form and that the acquirer uses to send the customer back after the\n    transaction, with transaction details given as a POST request.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
474	Payment Icon	payment.icon	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
475	Payment Transaction	payment.transaction	 Transaction Model. Each specific acquirer can extend the model by adding\n    its own fields.\n\n    Methods that can be added in an acquirer-specific implementation:\n\n     - ``<name>_create``: method receiving values used when creating a new\n       transaction and that returns a dictionary that will update those values.\n       This method can be used to tweak some transaction values.\n\n    Methods defined for convention, depending on your controllers:\n\n     - ``<name>_form_feedback(self, data)``: method that handles the data coming\n       from the acquirer after the transaction. It will generally receives data\n       posted by the acquirer after the transaction.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
476	Payment Token	payment.token	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
477	Payment acquire onboarding wizard	payment.acquirer.onboarding.wizard	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
478	Generate Payment Link	payment.link.wizard	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
479	Purchase Order	purchase.order	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	t	t	f	\N	\N	\N	\N
480	Purchase Order Line	purchase.order.line	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
156	Outgoing Mails	mail.mail	 Model holding RFC2822 email messages to send. This model also provides\n        facilities to queue and send new email messages.  	base	f	\N	\N	1	2020-02-14 11:31:12.740524	f	f	f	t	2003	Send an E-mail	send_mail
481	Purchase Report	purchase.report	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
482	Purchases & Bills Union	purchase.bill.union	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
530	Change Standard Price	stock.change.standard.price	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
572	Account Transfer Model	account.transfer.model	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
573	Account Transfer Model Line	account.transfer.model.line	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
574	Manage Summary and Footnotes of Reports	account.report.manager	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
575	Account Report Footnote	account.report.footnote	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
576	Account Report	account.report	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
577	Bank Reconciliation Report	account.bank.reconciliation.report	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
578	Account Report (HTML)	account.financial.html.report	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
579	Account Report (HTML Line)	account.financial.html.report.line	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
580	General Ledger Report	account.general.ledger	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
581	Generic Tax Report	account.generic.tax.report	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
582	Account Analytic Report	account.analytic.report	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
583	Consolidated Journals Report	account.consolidated.journal	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
584	Cash Flow Report	account.cash.flow.report	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
585	Chart of Account Report	account.coa.report	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
586	Aged Partner Balances	account.aged.partner	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
587	Aged Receivable	account.aged.receivable	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
588	Aged Payable	account.aged.payable	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
589	Partner Ledger	account.partner.ledger	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
590	Export wizard for accounting's reports	account_reports.export.wizard	 Wizard allowing to export an accounting report in several different formats\n    at once, saving them as attachments.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
591	Export format for accounting's reports	account_reports.export.wizard.format	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
592	Asset/Revenue Recognition	account.asset	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	t	t	f	\N	\N	\N	\N
593	Modify Asset	asset.modify	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
594	Pause Asset	account.asset.pause	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
595	Sell Asset	account.asset.sell	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
596	Account Assets Report	account.assets.report	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
597	Follow-up Criteria	account_followup.followup.line	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
598	Follow-up Report	account.followup.report	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
484	Product TIC Category	product.tic.category	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
599	Check Register Report	l10n_us_reports.check.register	Check Register is an accounting report usually part of the general ledger, used to record\n    financial transactions in cash.\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
600	Send Follow-ups	followup.send	 Model super-class for transient records, meant to be temporarily\n    persistent, and regularly vacuum-cleaned.\n\n    A TransientModel has a simplified access rights management, all users can\n    create new records, and may only access the records they created. The\n    superuser has unrestricted access to all TransientModel records.\n    	base	t	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
612	Theme UI View	theme.ir.ui.view	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
613	Theme Attachments	theme.ir.attachment	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
614	Website Theme Menu	theme.website.menu	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
615	Website Theme Page	theme.website.page	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
616	Theme Utils	theme.utils	 The base model, which is implicitly inherited by all models. 	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
205	Lead/Opportunity	crm.lead	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	1	2020-02-14 11:31:15.854012	t	t	t	t	3079	Create an Opportunity	create_lead
380	basic grammar type of word	vv.mot.type	 Main super-class for regular database-persisted Odoo models.\n\n    Odoo models are created by inheriting from this class::\n\n        class user(Model):\n            ...\n\n    The system will later instantiate the class once per database (on\n    which the class' module is installed).\n    	base	f	\N	\N	\N	\N	f	f	f	\N	\N	\N	\N
\.


--
-- Name: ir_model_id_seq; Type: SEQUENCE SET; Schema: public; Owner: odoo
--

SELECT pg_catalog.setval('public.ir_model_id_seq', 639, true);


--
-- Name: ir_model ir_model_obj_name_uniq; Type: CONSTRAINT; Schema: public; Owner: odoo
--

ALTER TABLE ONLY public.ir_model
    ADD CONSTRAINT ir_model_obj_name_uniq UNIQUE (model);


--
-- Name: CONSTRAINT ir_model_obj_name_uniq ON ir_model; Type: COMMENT; Schema: public; Owner: odoo
--

COMMENT ON CONSTRAINT ir_model_obj_name_uniq ON public.ir_model IS 'unique (model)';


--
-- Name: ir_model ir_model_pkey; Type: CONSTRAINT; Schema: public; Owner: odoo
--

ALTER TABLE ONLY public.ir_model
    ADD CONSTRAINT ir_model_pkey PRIMARY KEY (id);


--
-- Name: ir_model_model_index; Type: INDEX; Schema: public; Owner: odoo
--

CREATE INDEX ir_model_model_index ON public.ir_model USING btree (model);


--
-- Name: ir_model ir_model_create_uid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: odoo
--

ALTER TABLE ONLY public.ir_model
    ADD CONSTRAINT ir_model_create_uid_fkey FOREIGN KEY (create_uid) REFERENCES public.res_users(id) ON DELETE SET NULL;


--
-- Name: ir_model ir_model_website_form_default_field_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: odoo
--

ALTER TABLE ONLY public.ir_model
    ADD CONSTRAINT ir_model_website_form_default_field_id_fkey FOREIGN KEY (website_form_default_field_id) REFERENCES public.ir_model_fields(id) ON DELETE SET NULL;


--
-- Name: ir_model ir_model_write_uid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: odoo
--

ALTER TABLE ONLY public.ir_model
    ADD CONSTRAINT ir_model_write_uid_fkey FOREIGN KEY (write_uid) REFERENCES public.res_users(id) ON DELETE SET NULL;


--
-- PostgreSQL database dump complete
--
